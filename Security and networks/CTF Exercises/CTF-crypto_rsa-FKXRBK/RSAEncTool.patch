--- RSAEncTool.old.java	2025-02-03 12:28:42.000000000 +0000
+++ RSAEncTool.java	2025-02-06 10:34:22.000000000 +0000
@@ -79,6 +79,82 @@
             System.out.println("    -genAES     generate an AES key");}
     }
 
+    private static void encryptAESCTR() {
+        try {
+            // Open and read the input file
+            // N.B. this program reads the whole file into memory, not good for large programs!
+            RandomAccessFile rawDataFromFile = new RandomAccessFile(inFile, "r");
+            byte[] plainText = new byte[(int) rawDataFromFile.length()];
+            rawDataFromFile.read(plainText);
+            rawDataFromFile.close();
+
+            //Set up the AES key & cipher object in CTR mode
+            SecretKeySpec secretKeySpec = new SecretKeySpec(hexStringToByteArray(hexKey), "AES");
+            Cipher encAESCTRcipher = Cipher.getInstance("AES/CTR/NoPadding");
+            SecureRandom random = new SecureRandom();
+            byte iv[] = new byte[16];
+            random.nextBytes(iv);
+            IvParameterSpec ivSpec = new IvParameterSpec(iv);
+            encAESCTRcipher.init(Cipher.ENCRYPT_MODE, secretKeySpec,ivSpec);
+
+            //Encrypt the data
+            byte[] cipherText = encAESCTRcipher.doFinal(plainText);
+
+            //Write file to disk
+            System.out.println("Opening file to write: "+outFile);
+            FileOutputStream outToFile = new FileOutputStream(outFile);
+            outToFile.write(iv);
+            outToFile.write(cipherText);
+            outToFile.close();
+            System.out.println(inFile+" encrypted as "+outFile);
+        } catch (Exception e){
+            System.out.println("doh "+e);
+        }
+    }
+
+    private static void encryptAESCCM() {
+        try {
+            // Open and read the input file
+            // N.B. this program reads the whole file into memory, not good for large programs!
+            RandomAccessFile rawDataFromFile = new RandomAccessFile(inFile, "r");
+            byte[] plainText = new byte[(int) rawDataFromFile.length()];
+            rawDataFromFile.read(plainText);
+            rawDataFromFile.close();
+
+            //Set up the AES key & cipher object in CCM mode
+            SecretKeySpec secretKeySpec = new SecretKeySpec(hexStringToByteArray(hexKey), "AES");
+            // Add a security provider that actually does provide CCM mode
+            Security.insertProviderAt(new BouncyCastleProvider(), 1);
+            Cipher encAESCCMcipher = Cipher.getInstance("AES/CCM/NoPadding","BC");
+            SecureRandom random = new SecureRandom();
+            byte iv[] = new byte[10]; // BC needs us to leave room for the counter
+            random.nextBytes(iv);
+            IvParameterSpec ivSpec = new IvParameterSpec(iv);
+            encAESCCMcipher.init(Cipher.ENCRYPT_MODE, secretKeySpec,ivSpec);
+
+            //Encrypt the data
+            byte[] cipherText = encAESCCMcipher.doFinal(plainText);
+
+            //Write file to disk
+            System.out.println("Opening file to write: "+outFile);
+            FileOutputStream outToFile = new FileOutputStream(outFile);
+            outToFile.write(iv);
+            outToFile.write(cipherText);
+            outToFile.close();
+            System.out.println(inFile+" encrypted as "+outFile);
+        } catch (Exception e){
+            System.out.println("doh "+e);
+        }
+    }
+
+    private static void decryptAESCTR() {
+        System.out.println("AES CTR Decryption not yet supported");
+    }
+
+    private static void decryptAESCCM() {
+        System.out.println("AES CCM Decryption not yet supported");
+    }
+
     private static void encryptRSA() {
         try {
             //Get the public key from the keyStore and set up the Cipher object
@@ -88,7 +164,7 @@
 
             //Read the plainText
             System.out.println("Loading plaintext file: "+inFile); 
-            RandomAccessFile rawDataFromFile = new RandomAccessFile(i/getnFile, "r");
+            RandomAccessFile rawDataFromFile = new RandomAccessFile(inFile, "r");
             byte[] plainText = new byte[(int)rawDataFromFile.length()];
             rawDataFromFile.read(plainText);
 
